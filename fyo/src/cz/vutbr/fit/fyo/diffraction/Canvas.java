package cz.vutbr.fit.fyo.diffraction;

import cz.vutbr.fit.fyo.diffraction.apertures.Circle;
import cz.vutbr.fit.fyo.diffraction.apertures.Rectangle;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;

/**
 * Panel for visiualization of diffraction image
 * @author Pavel Frýz a Lukáš Němec
 */
public class Canvas extends javax.swing.JPanel {

    public enum Aperture {

        CIRCLE, RECTANGLE
    }

    Aperture aperture;
    Circle circle;
    Rectangle rectangle;
    float threshold;
    float red;
    float green;
    float blue;

    /**
     * Creates new form Canvas
     */
    public Canvas() {
        circle = new Circle(0.0001, 1, 4.4e-7);
        rectangle = new Rectangle(0.0001, 0.0001, 1, 4.4e-7);
        threshold = 0.001f;
        aperture = Aperture.CIRCLE;
        initComponents();
    }

    @Override
    public void paint(Graphics g) {
        Graphics2D g2 = (Graphics2D) g;
        int width = getSize().width;
        int height = getSize().height;
        int heightI = (int) (height * 0.7);
        int heightC = height - heightI - 6;

        BufferedImage intensityImg = new BufferedImage(width, heightI, BufferedImage.TYPE_INT_RGB);

        int hx = width / 2;
        int hy = heightI / 2;
        g2.fillRect(0, height - heightC, width, heightC);
        g2.setColor(new Color(red, green, blue));

        for (int x = 0; x < hx; x++) {
            for (int y = 0; y < hy; y++) {
                float intensity = 0;
                if (aperture == Aperture.CIRCLE) {
                    intensity = (float) circle.intensity((x) * 0.00001, (y) * 0.00001);
                } else if (aperture == Aperture.RECTANGLE) {
                    intensity = (float) rectangle.intensity((x) * 0.00001, (y) * 0.00001);
                }

                intensity = (intensity > threshold) ? 1 : intensity / threshold;
                int c = new Color(intensity * red, intensity * green, intensity * blue).getRGB();
                intensityImg.setRGB(x + hx, y + hy, c);
                intensityImg.setRGB(x + hx, -y + hy, c);
                intensityImg.setRGB(-x + hx, -y + hy, c);
                intensityImg.setRGB(-x + hx, y + hy, c);
                if (y == 0) {
                    int cur = (int) ((intensity) * (heightC - 8) + 4);
                    g2.drawLine(x + hx, height - 4, x + hx, height - cur);
                    g2.drawLine(-x + hx, height - 4, -x + hx, height - cur);
                }
            }
        }
 
        g2.drawImage(intensityImg, 0, 0, hx * 2, hy * 2, null);
        g2.setColor(new Color(255,255,254));
        g2.drawString("Area: " + String.format("%.2f", width * 0.01) + "x" + String.format("%.2f", heightI * 0.01) + " [mm2]", 4, 12);
        if (aperture == Aperture.CIRCLE) {
            g2.drawString("Airy's radius: " + String.format("%.4f", circle.min() * 1000) + " [mm]", 4, 24);
        } else {
            g2.drawString("First min x: " + String.format("%.4f", rectangle.minX() * 1000) + " [mm]", 4, 24);
            g2.drawString("First min y: " + String.format("%.4f", rectangle.minY() * 1000) + " [mm]", 4, 36);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    void setWavelenght(int value) {
        wavelengthToRGB(value);
        circle.setWavelenght(value * 1e-9);
        rectangle.setWavelenght(value * 1e-9);
        repaint();
    }

    void setDistance(int value) {
        rectangle.setDistance(value * 1e-2);
        circle.setDistance(value * 1e-2);
        repaint();
    }

    void setHeight(int value) {
        rectangle.setHeight(value * 1e-5);
        repaint();
    }

    void setWidth(int value) {
        rectangle.setWidth(value * 1e-5);
        circle.setRadius(value * 5e-6);
        repaint();
    }

    void setThreshold(float d) {
        threshold = d;
        repaint();
    }

    void setAperture(Aperture aperture) {
        this.aperture = aperture;
        repaint();
    }

    //Code to generate color is taken from
    //http://www.efg2.com/Lab/ScienceAndEngineering/Spectra.htm
    private void wavelengthToRGB(float l) {
        float gamma = 0.8f;
        float r, g, b, fact;

        if (l < 440) {
            r = (440 - l) / (440 - 380);
            g = 0;
            b = 1;
        } else if (l < 490) {
            r = 0;
            g = (l - 440) / (490 - 440);
            b = 1;
        } else if (l < 510) {
            r = 0;
            g = 1;
            b = (510 - l) / (510 - 490);
        } else if (l < 580) {
            r = (l - 510) / (580 - 510);
            g = 1;
            b = 0;
        } else if (l < 645) {
            r = 1;
            g = (645 - l) / (645 - 580);
            b = 0;
        } else {
            r = 1;
            g = 0;
            b = 0;
        }

        fact = 0;
        if (l < 420) {
            fact = 0.3f + 0.7f * (l - 380) / (420 - 380);
        } else if (l < 701) {
            fact = 1;
        } else if (l < 781) {
            fact = 0.3f + 0.7f * (780 - l) / (780 - 700);
        }
        red = (float) Math.pow(r * fact, gamma);
        green = (float) Math.pow(g * fact, gamma);
        blue = (float) Math.pow(b * fact, gamma);
    }
}
