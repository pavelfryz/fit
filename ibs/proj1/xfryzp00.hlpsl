role role_A(A:agent,B:agent,S:agent,Kas:symmetric_key,SND,RCV:channel(dy))
played_by A
def=
	local
		State:nat,Nb:text
	init
		State := 0
	transition
		1. State=0 /\ RCV(start) =|> State':=1 /\ SND(A)
		2. State=1 /\ RCV(Nb') =|> State':=2 /\ SND({A.B.Nb'}_Kas)
end role

role role_B(B:agent,S:agent,Kbs:symmetric_key,SND,RCV:channel(dy))
played_by B
def=
	local
		State:nat,Kas:symmetric_key,A:agent,Nb:text
	init
		State := 0
	transition
		1. State=0 /\ RCV(A') =|> State':=1 /\ Nb':=new() /\ SND(Nb')
		3. State=1 /\ RCV({A.B.Nb}_Kas') =|> State':=2 /\ SND({A.B.Nb.{A.B.Nb}_Kas'}_Kbs)
		5. State=2 /\ RCV({A.B.Nb}_Kbs) =|> State':=3
end role

role role_S(S:agent,A:agent,B:agent,Kas:symmetric_key,Kbs:symmetric_key,SND,RCV:channel(dy))
played_by S
def=
	local
		State:nat,Nb:text
	init
		State := 0
	transition
		4. State=0 /\ RCV({A.B.Nb'.{A.B.Nb'}_Kas}_Kbs) =|> State':=1 /\ SND({A.B.Nb'}_Kbs)
end role

role session1(S:agent,A:agent,B:agent,Kas:symmetric_key,Kbs:symmetric_key)
def=
	local
		SND3,RCV3,SND2,RCV2,SND1,RCV1:channel(dy)
	composition
		role_S(S,A,B,Kas,Kbs,SND3,RCV3) /\ role_B(B,S,Kbs,SND2,RCV2) /\ role_A(A,B,S,Kas,SND1,RCV1)
end role

role environment()
def=
	const
		hash_0:function,key1:symmetric_key,alice:agent,server:agent,bob:agent,key2:symmetric_key,auth_1:protocol_id
	intruder_knowledge = {}
	composition
		session1(server,alice,bob,key1,key2)
end role

goal
	authentication_on auth_1
end goal

environment()