/*
 * Soubor:  clock.h
 * Datum:   2012/11/12
 * Autor:   Pavel Fryz, xfryzp00
 * Projekt: Klasicky budik s vystupem na VGA
 * Podil:   Original
 */

#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>

#include <fitkitlib.h>
#include <keyboard/keyboard.h>
#include <lcd/display.h>

#define BASE_ADDR_VRAM 0x8000
#define VGA_STRIDE 128
#define VGA_COLUMNS 80
#define VGA_ROWS 60

#define VGA_BACKGROUND 1
#define VGA_BLACK 0
#define VGA_WHITE 1
#define VGA_YELLOW 3
#define VGA_RED 13
#define VGA_GRAY 2 
#define VGA_BLUE 4
#define VGA_LIGHT_BLUE 10

#define BELL(x, y) bell[y][x]
#define BELL_WIDTH 6
#define BELL_HEIGHT 7
#define BELL_X 65
#define BELL_Y 15

#define NUMS(x, y, digit) nums[digit][y][x]
#define NUMS_WIDTH 4
#define NUMS_HEIGHT 7
#define NUM1_X 57
#define NUM2_X 62
#define NUM3_X 69
#define NUM4_X 74
#define NUM_Y 3
#define COLON_X 67
#define COLON1_Y 5
#define COLON2_Y 8

#define SUN(x, y) sun[y][x]
#define MOON(x, y) moon[y][x]
#define SUN_MOON_WIDTH 11
#define SUN_MOON_HEIGHT 11
#define SUN_MOON_X 62
#define SUN_MOON_Y 46

#define CLOCK_X 31
#define CLOCK_Y 29

#define FACE 8
//pole se souradnicemi rucicek a ciferniku hodin
const unsigned char seconds_x[FACE] = { 0, 3, 6, 9, 12, 15, 17, 19 };
const unsigned char seconds_y[FACE] = { 29, 29, 28, 28, 26, 25, 23, 22 };
const unsigned char minutes_x[FACE] = { 0, 3, 5, 8, 11, 13, 15, 17 };
const unsigned char minutes_y[FACE] = { 26, 26, 25, 25, 24, 23, 21, 19 };
const unsigned char hours_x[FACE] = { 0, 2, 5, 7, 9, 12, 14, 15 };
const unsigned char hours_y[FACE] = { 23, 23, 22, 22, 21, 20, 19, 17 };
const unsigned char face_x[FACE] = { 0, 3, 6, 9, 12, 13, 16, 18 };
const unsigned char face_y[FACE] = { 25, 28, 27, 27, 25, 22, 22, 21 };
const unsigned char center[FACE] = { 0, 0, 0, 0, 0, 0, 0, 0 };

unsigned char color;
#define SWAP(a, b) { (b) ^= (a); (a) ^= (b); (b) ^= (a); }
#define PUT_PIXEL(x, y) { FPGA_SPI_RW_AN_DN(SPI_FPGA_ENABLE_WRITE, BASE_ADDR_VRAM + (y) * VGA_STRIDE + (x), &color, 2, 1); }
#define PUT_PIXEL_C(x, y, c) { color=c; FPGA_SPI_RW_AN_DN(SPI_FPGA_ENABLE_WRITE, BASE_ADDR_VRAM + (y) * VGA_STRIDE + (x), &color, 2, 1); }
#define DRAW_REL_LINE(x1,y1,x2,y2) { draw_line(CLOCK_X+(x1),CLOCK_Y+(y1),CLOCK_X+(x2),CLOCK_Y+(y2)); }

//symbol zvonku
const unsigned char bell[BELL_HEIGHT][BELL_WIDTH] = {
  {VGA_BACKGROUND, VGA_BACKGROUND, VGA_BLACK, VGA_BLACK, VGA_BACKGROUND, VGA_BACKGROUND},
  {VGA_BACKGROUND, VGA_BLACK, VGA_YELLOW, VGA_YELLOW, VGA_BLACK, VGA_BACKGROUND},
  {VGA_BACKGROUND, VGA_BLACK, VGA_YELLOW, VGA_YELLOW, VGA_BLACK, VGA_BACKGROUND},
  {VGA_BACKGROUND, VGA_BLACK, VGA_YELLOW, VGA_YELLOW, VGA_BLACK, VGA_BACKGROUND},
  {VGA_BLACK, VGA_YELLOW, VGA_YELLOW, VGA_YELLOW, VGA_YELLOW, VGA_BLACK},
  {VGA_BLACK, VGA_YELLOW, VGA_YELLOW, VGA_YELLOW, VGA_YELLOW, VGA_BLACK},
  {VGA_BACKGROUND, VGA_BACKGROUND, VGA_BLACK, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BACKGROUND},
};

//pole s ciframi (0-9)
const unsigned char nums[10][NUMS_HEIGHT][NUMS_WIDTH] = {
  {
   {VGA_BACKGROUND, VGA_BLACK, VGA_BLACK, VGA_BACKGROUND},
   {VGA_BLACK, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BLACK},
   {VGA_BLACK, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BLACK},
   {VGA_BLACK, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BLACK},
   {VGA_BLACK, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BLACK},
   {VGA_BLACK, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BLACK},
   {VGA_BACKGROUND, VGA_BLACK, VGA_BLACK, VGA_BACKGROUND}
  },{
   {VGA_BACKGROUND, VGA_BACKGROUND, VGA_BLACK, VGA_BACKGROUND},
   {VGA_BACKGROUND, VGA_BLACK, VGA_BLACK, VGA_BACKGROUND},
   {VGA_BACKGROUND, VGA_BACKGROUND, VGA_BLACK, VGA_BACKGROUND},
   {VGA_BACKGROUND, VGA_BACKGROUND, VGA_BLACK, VGA_BACKGROUND},
   {VGA_BACKGROUND, VGA_BACKGROUND, VGA_BLACK, VGA_BACKGROUND},
   {VGA_BACKGROUND, VGA_BACKGROUND, VGA_BLACK, VGA_BACKGROUND},
   {VGA_BACKGROUND, VGA_BLACK, VGA_BLACK, VGA_BLACK}
  },{
   {VGA_BACKGROUND, VGA_BLACK, VGA_BLACK, VGA_BACKGROUND},
   {VGA_BLACK, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BLACK},
   {VGA_BACKGROUND, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BLACK},
   {VGA_BACKGROUND, VGA_BACKGROUND, VGA_BLACK, VGA_BACKGROUND},
   {VGA_BACKGROUND, VGA_BLACK, VGA_BACKGROUND, VGA_BACKGROUND},
   {VGA_BLACK, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BACKGROUND},
   {VGA_BLACK, VGA_BLACK, VGA_BLACK, VGA_BLACK}
  },{
   {VGA_BACKGROUND, VGA_BLACK, VGA_BLACK, VGA_BACKGROUND},
   {VGA_BLACK, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BLACK},
   {VGA_BACKGROUND, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BLACK},
   {VGA_BACKGROUND, VGA_BACKGROUND, VGA_BLACK, VGA_BACKGROUND},
   {VGA_BACKGROUND, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BLACK},
   {VGA_BLACK, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BLACK},
   {VGA_BACKGROUND, VGA_BLACK, VGA_BLACK, VGA_BACKGROUND}
  },{
   {VGA_BACKGROUND, VGA_BACKGROUND, VGA_BLACK, VGA_BACKGROUND},
   {VGA_BACKGROUND, VGA_BACKGROUND, VGA_BLACK, VGA_BACKGROUND},
   {VGA_BACKGROUND, VGA_BLACK, VGA_BLACK, VGA_BACKGROUND},
   {VGA_BLACK, VGA_BACKGROUND, VGA_BLACK, VGA_BACKGROUND},
   {VGA_BLACK, VGA_BACKGROUND, VGA_BLACK, VGA_BACKGROUND},
   {VGA_BLACK, VGA_BLACK, VGA_BLACK, VGA_BLACK},
   {VGA_BACKGROUND, VGA_BACKGROUND, VGA_BLACK, VGA_BACKGROUND}
  },{
   {VGA_BLACK, VGA_BLACK, VGA_BLACK, VGA_BLACK},
   {VGA_BLACK, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BACKGROUND},
   {VGA_BLACK, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BACKGROUND},
   {VGA_BLACK, VGA_BLACK, VGA_BLACK, VGA_BACKGROUND},
   {VGA_BACKGROUND, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BLACK},
   {VGA_BACKGROUND, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BLACK},
   {VGA_BLACK, VGA_BLACK, VGA_BLACK, VGA_BLACK}
  },{
   {VGA_BACKGROUND, VGA_BLACK, VGA_BLACK, VGA_BACKGROUND},
   {VGA_BLACK, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BLACK},
   {VGA_BLACK, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BACKGROUND},
   {VGA_BLACK, VGA_BLACK, VGA_BLACK, VGA_BACKGROUND},
   {VGA_BLACK, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BLACK},
   {VGA_BLACK, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BLACK},
   {VGA_BACKGROUND, VGA_BLACK, VGA_BLACK, VGA_BACKGROUND}
  },{
   {VGA_BLACK, VGA_BLACK, VGA_BLACK, VGA_BLACK},
   {VGA_BACKGROUND, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BLACK},
   {VGA_BACKGROUND, VGA_BACKGROUND, VGA_BLACK, VGA_BACKGROUND},
   {VGA_BACKGROUND, VGA_BACKGROUND, VGA_BLACK, VGA_BACKGROUND},
   {VGA_BACKGROUND, VGA_BLACK, VGA_BACKGROUND, VGA_BACKGROUND},
   {VGA_BACKGROUND, VGA_BLACK, VGA_BACKGROUND, VGA_BACKGROUND},
   {VGA_BACKGROUND, VGA_BLACK, VGA_BACKGROUND, VGA_BACKGROUND}
  },{
   {VGA_BACKGROUND, VGA_BLACK, VGA_BLACK, VGA_BACKGROUND},
   {VGA_BLACK, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BLACK},
   {VGA_BLACK, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BLACK},
   {VGA_BACKGROUND, VGA_BLACK, VGA_BLACK, VGA_BACKGROUND},
   {VGA_BLACK, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BLACK},
   {VGA_BLACK, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BLACK},
   {VGA_BACKGROUND, VGA_BLACK, VGA_BLACK, VGA_BACKGROUND}
  },{
   {VGA_BACKGROUND, VGA_BLACK, VGA_BLACK, VGA_BACKGROUND},
   {VGA_BLACK, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BLACK},
   {VGA_BLACK, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BLACK},
   {VGA_BACKGROUND, VGA_BLACK, VGA_BLACK, VGA_BLACK},
   {VGA_BACKGROUND, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BLACK},
   {VGA_BLACK, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BLACK},
   {VGA_BACKGROUND, VGA_BLACK, VGA_BLACK, VGA_BACKGROUND}
  },
};

//indikator dne
const unsigned char sun[SUN_MOON_HEIGHT][SUN_MOON_WIDTH] = {
  {VGA_BACKGROUND, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BACKGROUND, VGA_YELLOW, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BACKGROUND},
  {VGA_BACKGROUND, VGA_YELLOW, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BACKGROUND, VGA_YELLOW, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BACKGROUND, VGA_YELLOW, VGA_BACKGROUND},
  {VGA_BACKGROUND, VGA_BACKGROUND, VGA_YELLOW, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BACKGROUND, VGA_YELLOW, VGA_BACKGROUND, VGA_BACKGROUND},
  {VGA_BACKGROUND, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BACKGROUND, VGA_YELLOW, VGA_YELLOW, VGA_YELLOW, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BACKGROUND},
  {VGA_BACKGROUND, VGA_BACKGROUND, VGA_BACKGROUND, VGA_YELLOW, VGA_YELLOW, VGA_YELLOW, VGA_YELLOW, VGA_YELLOW, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BACKGROUND},
  {VGA_YELLOW, VGA_YELLOW, VGA_BACKGROUND, VGA_YELLOW, VGA_YELLOW, VGA_YELLOW, VGA_YELLOW, VGA_YELLOW, VGA_BACKGROUND, VGA_YELLOW, VGA_YELLOW},
  {VGA_BACKGROUND, VGA_BACKGROUND, VGA_BACKGROUND, VGA_YELLOW, VGA_YELLOW, VGA_YELLOW, VGA_YELLOW, VGA_YELLOW, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BACKGROUND},
  {VGA_BACKGROUND, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BACKGROUND, VGA_YELLOW, VGA_YELLOW, VGA_YELLOW, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BACKGROUND},
  {VGA_BACKGROUND, VGA_BACKGROUND, VGA_YELLOW, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BACKGROUND, VGA_YELLOW, VGA_BACKGROUND, VGA_BACKGROUND},
  {VGA_BACKGROUND, VGA_YELLOW, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BACKGROUND, VGA_YELLOW, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BACKGROUND, VGA_YELLOW, VGA_BACKGROUND},
  {VGA_BACKGROUND, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BACKGROUND, VGA_YELLOW, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BACKGROUND},
};

//indikator noci
const unsigned char moon[SUN_MOON_HEIGHT][SUN_MOON_WIDTH] = {
  {VGA_BACKGROUND, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BACKGROUND},
  {VGA_BACKGROUND, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BACKGROUND, VGA_YELLOW, VGA_YELLOW, VGA_BACKGROUND, VGA_BACKGROUND},
  {VGA_BACKGROUND, VGA_BACKGROUND, VGA_YELLOW, VGA_BACKGROUND, VGA_YELLOW, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BACKGROUND, VGA_YELLOW, VGA_YELLOW, VGA_BACKGROUND},
  {VGA_BACKGROUND, VGA_BACKGROUND, VGA_BACKGROUND, VGA_YELLOW, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BACKGROUND, VGA_YELLOW, VGA_YELLOW, VGA_YELLOW},
  {VGA_BACKGROUND, VGA_BACKGROUND, VGA_YELLOW, VGA_BACKGROUND, VGA_YELLOW, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BACKGROUND, VGA_YELLOW, VGA_YELLOW, VGA_YELLOW},
  {VGA_BACKGROUND, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BACKGROUND, VGA_YELLOW, VGA_YELLOW, VGA_YELLOW},
  {VGA_BACKGROUND, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BACKGROUND, VGA_YELLOW, VGA_YELLOW, VGA_YELLOW, VGA_YELLOW},
  {VGA_BACKGROUND, VGA_YELLOW, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BACKGROUND, VGA_YELLOW, VGA_YELLOW, VGA_YELLOW, VGA_YELLOW, VGA_YELLOW},
  {VGA_BACKGROUND, VGA_YELLOW, VGA_YELLOW, VGA_YELLOW, VGA_YELLOW, VGA_YELLOW, VGA_YELLOW, VGA_YELLOW, VGA_YELLOW, VGA_YELLOW, VGA_BACKGROUND},
  {VGA_BACKGROUND, VGA_BACKGROUND, VGA_YELLOW, VGA_YELLOW, VGA_YELLOW, VGA_YELLOW, VGA_YELLOW, VGA_YELLOW, VGA_YELLOW, VGA_BACKGROUND, VGA_BACKGROUND},
  {VGA_BACKGROUND, VGA_BACKGROUND, VGA_BACKGROUND, VGA_YELLOW, VGA_YELLOW, VGA_YELLOW, VGA_YELLOW, VGA_YELLOW, VGA_BACKGROUND, VGA_BACKGROUND, VGA_BACKGROUND},
};

void draw_line(char x1, char y1, char x2, char y2);
void LCD_write_time();
void VGA_draw_bell();
void VGA_draw_sun_moon();
void VGA_draw_alarm();
void VGA_clear(void);
void draw_hand(unsigned char pos, const unsigned char *x1,
               const unsigned char *y1, const unsigned char *x2,
               const unsigned char *y2);
void VGA_draw_hands();
void VGA_clear_hands();
void VGA_draw_face();
int keyboard_idle();
