; spojeni seznamu

(defun spoj (L1 L2)
  (cond ((null L1) L2)
        (T (cons (car L1) (spoj (cdr L1) L2)))
  )
)

; vytvorte
; obraceni obecneho seznamu obratOb(seznam)
(defun obratOb (L)
  (cond ((atom L) L)
        (T (spoj (obratOb (cdr L)) (list (obratOb (car L)))))
  )
)

; test zda je prvek obsazen v obecnem seznamu jePrvekOb(seznam, prvek)
(defun jePrvekOb (L P)
  (cond ((eq L P) T)
        ((atom L) NIL)
        (T (or (jePrvekOb (car L) P) (jePrvekOb (cdr L) P)))
  )
)

; prumer prvku obecneho seznamu prumerPrvkuOb(seznam)
(defun prumerPrvkuOb (L)
  (cond ((null L) 0)
		(T (*(/ (soucetPrvkuOb L) (pocetPrvkuOb L)) 1.0))
  )
)

(defun pocetPrvkuOb (L)
  (cond ((null L) 0)
        ((atom L) 1)
        (T (+ (pocetPrvkuOb (car L)) (pocetPrvkuOb (cdr L))))
  )
)

; soucet prvku obecneho seznamu soucetPrvkuOb(seznam)
(defun soucetPrvkuOb (L)
  (cond ((null L) 0)
        ((atom L) L)
        (T (+ (soucetPrvkuOb (car L)) (soucetPrvkuOb (cdr L))))
  )
)

; overeni monotonnosti linearniho seznamu monotonnostLin(seznam)
(defun monotonnostLin (L)
  (or (neklesajici L) (nerostouci L))
)

(defun neklesajici (L)
  (cond ((null L) T)
        ((null (cadr L)) T)
        (T (and (>= (car L) (cadr L)) (neklesajici (cdr L))))
  )
)

(defun nerostouci (L)
  (cond ((null L) T)
        ((null (cadr L)) T)
        (T (and (<= (car L) (cadr L)) (nerostouci (cdr L))))
  )
)
